---
title: "Monitoring des Affiliations et Curation d'Openalex"
format: 
  dashboard:
    embed-resources: true
    orientation: columns
    theme: 
      - flatly 
      - custom.scss
---

```{r}
#| include: false


## Packages
pacman::p_load(
  quarto,
  tidyverse, 
  rio, 
  here,
  DT, 
  lubridate, 
  plotly, 
  matchmaker, 
  reactable, 
  janitor, 
  forcats, 
  plotly
)


## Données
work_magnet_all <- import(here("data", "work_magnet_all.csv"))
su_structures <- import(here("data", "su_structures.rds"))


## Thesaurus ror pour institutions de recherche
thesaurus <- import(here("data", "thesaurus_ror.csv"))


## Information mises à jour
maj <- file.info(here("data", "work_magnet_all.csv"))$mtime
maj <- as.Date(maj, format = "%Y-%m-%d")



## Préparation des données 
su_structures <- su_structures %>% unnest(display_name_acronyms)
su_structures <- su_structures %>% 
  distinct(across(-display_name_acronyms), .keep_all = TRUE)
su_structures <- su_structures %>% 
  mutate(display_name_acronyms = ifelse(
    !is.na(display_name_acronyms), 
    display_name_acronyms, 
    display_name))
su_structures <- su_structures %>% 
  separate(display_name_acronyms, into = "Acronymes", sep = ":")
work_magnet_su <- work_magnet_all %>% 
  filter(contact_domain == "sorbonne-universite.fr")

```

# Activités GT OpenAlex {}

## Value box {width="10%"}

```{r}
demandes <- work_magnet_su %>% 
  count() %>% 
  paste()

traitees <-  work_magnet_su %>% 
  filter(!is.na(date_closed)) %>% 
  count() %>% 
  paste()

en_cours <- work_magnet_su %>% 
  filter(is.na(date_closed)) %>% 
  count() %>% 
  paste()
```

```{r}
#| content: valuebox
#| title: "Demandes de correction soumises" 
list(
  value = demandes,
  icon = "box-arrow-in-up",
  color = "vb-primary"
)
```
```{r}
#| content: valuebox
#| title: "Demandes en cours"
list(
  value = en_cours, 
  icon = "arrow-repeat",
  color = "vb-info"
)
```
```{r}
#| content: valuebox
#| title: "Demandes traitées"
list(
  value = traitees,
  icon = "check-circle",
  color = "vb-success"
)
```


## Graphiques demandes soumises et non corrigées {width="55%"}

### {.tabset title="Demandes de corrections soumises (par mois)"}

```{r}
#| title: "2025"


monthly_breaks <- seq.Date(
  from = as.Date("2025-01-01"), 
  to = as.Date("2025-12-31"), 
  by = "months")


p <- work_magnet_su %>% 
  filter(year(date_opened) == 2025) %>% 
  ggplot() +
  aes(x = date_opened) + 
  geom_histogram(
    breaks = monthly_breaks, 
    color = "white", 
    fill = "#1D2769") +
  theme_classic() +
  theme(axis.text = element_text(size = 15)) +
  scale_x_date(date_breaks = "1 months",
               date_labels = "%b") +
  scale_y_continuous(expand = c(0,0)) +
  labs(x = "", 
       y = "")
ggplotly(p)
```

```{r}
#| title: "2024"


monthly_breaks <- seq.Date(
  from = as.Date("2024-01-01"), 
  to = as.Date("2024-12-31"), 
  by = "months")


p <- work_magnet_su %>% 
  filter(year(date_opened) == 2024) %>% 
  ggplot() +
  aes(x = date_opened) + 
  geom_histogram(
    breaks = monthly_breaks,
    color = "white",
    fill = "#1D2769") +
  theme_classic() +
  theme(axis.text = element_text(size = 15)) +
  scale_x_date(date_breaks = "1 months",
               date_labels = "%b") +
  scale_y_continuous(expand = c(0,0)) +
  labs(x = "", 
       y = "")
ggplotly(p)
```

### {.tabset title="Demandes non corrigées (par mois)"}

```{r}
#| title: "2025"


monthly_breaks <- seq.Date(
  from = as.Date("2025-01-01"), 
  to = as.Date("2025-12-31"), 
  by = "months")


p <- work_magnet_su %>% 
  filter(year(date_opened) == 2025) %>% 
  filter(is.na(date_closed)) %>% 
  ggplot() +
  aes(x = date_opened) + 
  geom_histogram(
    breaks = monthly_breaks,
    color = "white",
    fill = "#1D2769") +
  theme_classic() +
  theme(axis.text = element_text(size = 15)) +
  scale_x_date(date_breaks = "1 months",
               date_labels = "%b") +
  scale_y_continuous(expand = c(0,0)) +
  labs(x = "", 
       y = "")
ggplotly(p)
```

```{r}
#| title: "2024"


monthly_breaks <- seq.Date(
  from = as.Date("2024-01-01"), 
  to = as.Date("2024-12-31"), 
  by = "months")


p <- work_magnet_su %>% 
  filter(year(date_opened) == 2024) %>% 
  filter(is.na(date_closed)) %>% 
  ggplot() +
  aes(x = date_opened) + 
  geom_histogram(
    breaks = monthly_breaks,
    color = "white",
    fill = "#1D2769") +
  theme_classic() +
  theme(axis.text = element_text(size = 15)) +
  scale_x_date(date_breaks = "1 months",
               date_labels = "%b") +
  scale_y_continuous(expand = c(0,0)) +
  labs(x = "", 
       y = "")
ggplotly(p)
```

## Tableau détails demandes en cours {width="35%"}

### 

```{r}
df <- work_magnet_su %>% 
  mutate(date_closed = as.Date(date_closed)) %>% 
  mutate(date_closed = if_else(is.na(date_closed), maj, date_closed)) %>% 
  mutate("Délai" = as.integer(round(difftime(date_closed, date_opened, units = "days"))))
  
  
summary(df$Délai)
df %>% 
  tabyl(Délai) %>%
  ggplot() +
  aes(x = Délai, 
      y = n) +
  geom_histogram()
```

### 

```{r}
#| title: "Demandes en cours"


work_magnet_su %>% 
  filter(state == "open") %>% 
  mutate(date_closed = maj) %>% 
  mutate("Délai" = round(difftime(date_closed, date_opened, units = "days"))) %>% 
  mutate("Correction" = ifelse(has_added_rors == "1", "ror ajouté", "ror retiré")) %>% 
  mutate("Structure" = ifelse(has_added_rors == "1", added_rors, removed_rors)) %>% 
  select(
    "Issue" = github_issue_id, 
    Correction, 
    Structure,
    "Date d'ouverture" = date_opened,
    Délai
    ) %>% 
  arrange(desc(Délai)) %>%
  mutate(Délai = paste(Délai, "jours")) %>% 
  reactable(
    striped = TRUE, 
    pagination = FALSE,
    showSortable = TRUE,
    searchable = TRUE,
    defaultColDef = colDef(align = "left")
    )
```

# Corrections externes

## 

```{r}
#| title: "Retrait de l'affiliation Sorbonne université"


p <- work_magnet_all %>% 
  filter(grepl("02en5vm52", removed_rors)) %>% 
  count(contact_domain) %>% 
  ggplot() +
  aes(y = fct_rev(fct_infreq(contact_domain, n)),
      x = n) +
  geom_col(fill = "#1D2769") +
  theme_classic() +
  theme(axis.text = element_text(size = 15)) +
  scale_x_continuous(
    expand = c(0, 0, 0.1, 0),
    breaks = scales::breaks_width(1)) +
  scale_y_discrete(expand = c(0, 0)) +
  labs(x = "", 
       y = "")
ggplotly(p)
```

```{r}


work_magnet_all %>% 
  filter(grepl("02en5vm52", removed_rors)) %>% 
  separate_rows(openalex_works_examples, sep = ";") %>% 
  select(
    "Issue" = github_issue_id,
    "Structure" = removed_rors, 
    "Signature" = raw_affiliation_name,
    "Contacte" = contact_domain
    ) %>% 
  group_by(Issue, Structure, Signature, Contacte) %>% 
  summarise("Publications" = n()) %>%
  arrange(desc(Publications)) %>% 
  reactable(
    striped = TRUE, 
    pagination = FALSE,
    showSortable = TRUE,
    searchable = TRUE,
    defaultColDef = colDef(align = "left")
    )
```

## 

```{r}
#| title: "Ajout de l'affiliation Sorbonne université"


p <- work_magnet_all %>% 
  filter(grepl("02en5vm52", added_rors)) %>% 
  count(contact_domain) %>% 
  ggplot() +
  aes(y = fct_rev(fct_infreq(contact_domain, n)),
      x = n) +
  geom_col(fill = "#1D2769") +
  theme_classic() +
  theme(axis.text = element_text(size = 15)) +
  scale_x_continuous(
    expand = c(0, 0, 0.1, 0),
    breaks = scales::breaks_width(10)) +
  scale_y_discrete(expand = c(0, 0)) +
  labs(x = "", 
       y = "")
ggplotly(p)
```

```{r}


work_magnet_all %>% 
  filter(grepl("02en5vm52", added_rors)) %>% 
  separate_rows(openalex_works_examples, sep = ";") %>% 
  select(
    "Issue" = github_issue_id,
    "Structure" = added_rors, 
    "Signature" = raw_affiliation_name,
    "Contacte" = contact_domain
    ) %>% 
  group_by(Issue, Structure, Signature, Contacte) %>% 
  summarise("Publications" = n()) %>%
  arrange(desc(Publications)) %>% 
  reactable(
    striped = TRUE, 
    pagination = FALSE,
    showSortable = TRUE,
    searchable = TRUE,
    defaultColDef = colDef(align = "left")
    )
```

# Structures de recherche 

## {width="60%"}

```{r}
#| title: "Demande de correction d'affiliations par structures"


p <- work_magnet_su %>%  
  mutate(added_rors = str_remove(added_rors, pattern = "02en5vm52;")) %>% 
  mutate(added_rors = str_remove(added_rors, pattern = ";02en5vm52")) %>%  
  separate_rows(added_rors, sep = ";") %>% 
  filter(added_rors != "") %>% 
  left_join(su_structures, by = c("added_rors" = "ror")) %>% 
  mutate(Acronymes = ifelse(
    !is.na(Acronymes), 
    Acronymes, 
    added_rors)) %>% 
  count(Acronymes, state) %>% 
  ggplot() +
  aes(y = fct_rev(fct_infreq(Acronymes, n)), 
      x = n, 
      fill = state) + 
  geom_col() +
  theme_classic() +
  scale_fill_manual(values = c("open" = "#E6332A", 
                               "closed" = "#1D2769"),
                    name = "Etat :") +
  labs(x = "", 
       y = "")
ggplotly(p)
```

## {width="40%"}

```{r}


work_magnet_su %>% 
  select(added_rors, raw_affiliation_name) %>%
  reactable(
    pagination = FALSE, 
    striped = TRUE)
```

# Corrections globales

## {ror manquants corrigés (au total)}

```{r}
#| title: "Publications récupérées (par institutions de recherche)"


work_magnet_su %>% 
  filter(!is.na(date_closed)) %>% 
  mutate(added_rors = str_remove(added_rors, pattern = "02en5vm52;")) %>% 
  mutate(added_rors = str_remove(added_rors, pattern = ";02en5vm52")) %>% 
  separate_rows(openalex_works_examples, sep = ";") %>% 
  group_by(added_rors) %>% 
  count() %>% 
  match_df(dictionary = thesaurus, 
           from = "from", 
           to = "to", 
           by = "col") %>%
  filter(!is.na(added_rors)) %>% 
  arrange(desc(n)) %>% 
  adorn_totals(where = "row") %>% 
  reactable(
    striped = TRUE, 
    pagination = FALSE
    ) 
```

```{r}
#| title: "Demandes de correction (par institutions de recherche)"


work_magnet_su %>% 
  filter(!is.na(date_closed)) %>% 
  mutate(added_rors = str_remove(added_rors, pattern = "02en5vm52;")) %>% 
  mutate(added_rors = str_remove(added_rors, pattern = ";02en5vm52")) %>% 
  separate_rows(added_rors, sep = ";") %>% 
  group_by(added_rors) %>% 
  count() %>% 
  match_df(dictionary = thesaurus, 
           from = "from", 
           to = "to", 
           by = "col") %>% 
  filter(!is.na(added_rors)) %>% 
  arrange(desc(n)) %>% 
  adorn_totals(where = "row") %>% 
  reactable(
    striped = TRUE, 
    pagination = FALSE
    )
```

